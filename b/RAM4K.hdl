/**
 * Author:	Sung Ki Ling
 * Date:	2018/11/08
 * Memory of 4K registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

// The RAM4K chip is just 4K 16-bit registers stacked together.
// We load in the same way as with the Bit chip, except now we're
// loading 16-bit words instead of 1-bit words, and we also need
// an address that tells which of the 4096 registers to access

// Hence, with an address, an input word, and a load, we can read/write/store
// about four thousand (4096) distinct 16-bit words

CHIP RAM4K {
    
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    //if load==1, set the 16-bit value at address specified in the ram512 module
    RAM512(in=in,load=l1,address=address[3..11],out=o1);
    RAM512(in=in,load=l2,address=address[3..11],out=o2);
    RAM512(in=in,load=l3,address=address[3..11],out=o3);
    RAM512(in=in,load=l4,address=address[3..11],out=o4);
    RAM512(in=in,load=l5,address=address[3..11],out=o5);
    RAM512(in=in,load=l6,address=address[3..11],out=o6);
    RAM512(in=in,load=l7,address=address[3..11],out=o7);
    RAM512(in=in,load=l8,address=address[3..11],out=o8);

    // selecting the ram512 based on the address
    DMux8Way(in=load,sel=address[0..2],a=l1,b=l2,c=l3,d=l4,e=l5,f=l6,g=l7,h=l8);
    //based on the address, select the ram512 module output that was obtained from above
    Mux8Way16(a=o1,b=o2,c=o3,d=o4,e=o5,f=o6,g=o7,h=o8,sel=address[0..2],out=out);
}
